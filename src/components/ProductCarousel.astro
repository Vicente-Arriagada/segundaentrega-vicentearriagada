---
import CarouselCard from './CarouselCard.astro';
const { productos, titulo } = Astro.props;
---

<section class="py-12">
  <h2 class="text-3xl font-extrabold text-gray-900 mb-8 text-center">{titulo}</h2>
  
  <div class="relative">
    
    <div 
      id="carousel-container" 
      class="flex overflow-x-auto gap-4 py-4 snap-x snap-mandatory scroll-smooth scrollbar-hide">
      {productos.map((producto: any) => (
        <div class="snap-start flex-shrink-0 w-3/4 sm:w-1/2 md:w-1/3 lg:w-1/4">
          <div class="h-full">
            <CarouselCard producto={producto} />
          </div>
        </div>
      ))}
    </div>

    <button 
      id="prev-btn" 
      class="absolute top-1/2 left-0 -translate-y-1/2 bg-white/80 backdrop-blur-sm rounded-full w-10 h-10 hidden md:flex items-center justify-center shadow-md hover:bg-white focus:outline-none disabled:opacity-0 disabled:cursor-not-allowed transition-all text-2xl font-bold text-gray-800">
      <i class="fa-solid fa-arrow-left"></i>
    </button>
    
    <button 
      id="next-btn"
      class="absolute top-1/2 right-0 -translate-y-1/2 bg-white/80 backdrop-blur-sm rounded-full w-10 h-10 hidden md:flex items-center justify-center shadow-md hover:bg-white focus:outline-none disabled:opacity-0 disabled:cursor-not-allowed transition-all text-2xl font-bold text-gray-800">
      <i class="fa-solid fa-arrow-right"></i>
    </button>
  </div>
</section>


<script client:load> // Funcion para carrusel
  document.addEventListener("DOMContentLoaded", () => {
    
    const carousels = document.querySelectorAll(".relative");

    carousels.forEach(carousel => {
      const container = carousel.querySelector("#carousel-container");
      const prevBtn = carousel.querySelector("#prev-btn");
      const nextBtn = carousel.querySelector("#next-btn");

      if (!container || !prevBtn || !nextBtn) return;

      function updateButtons() {
       
        if (window.innerWidth < 768) { 
          prevBtn.disabled = true;
          nextBtn.disabled = true;
          return;
        }

        const atStart = container.scrollLeft === 0;
        const atEnd = container.scrollLeft + container.clientWidth >= container.scrollWidth - 5;
        
        prevBtn.disabled = atStart;
        nextBtn.disabled = atEnd;
      }

      nextBtn.addEventListener("click", () => {
        const cardWidth = container.querySelector("div").clientWidth;
        container.scrollLeft += cardWidth + 16;
      });

      prevBtn.addEventListener("click", () => {
        const cardWidth = container.querySelector("div").clientWidth;
        container.scrollLeft -= cardWidth + 16;
      });

      container.addEventListener("scroll", updateButtons, { passive: true });
      updateButtons();
      window.addEventListener("resize", updateButtons, { passive: true });
    });
  });
</script>

<style is:global>
  @media (max-width: 767px) {
    .scrollbar-hide-mobile {
      scrollbar-width: none;
    }
    .scrollbar-hide-mobile::-webkit-scrollbar {
      display: none;
    }
  }
</style>